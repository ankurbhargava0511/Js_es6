{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Promise"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const myPromise= new Promise((resolve,reject)=>{\r\n    if (true){\r\n        setTimeout(()=>{\r\n            resolve('I have success');\r\n        },1000);\r\n    }\r\n});\r\n\r\nmyPromise.then(value=>console.log(value));\r\n\r\nmyPromise\r\n.then(value=> { return value + 'Test';})\r\n.then(val=>console.log(val));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "I have success",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const myPromiseWithReject= new Promise((resolve,reject)=>{\r\n    if (false){\r\n        setTimeout(()=>{\r\n            resolve('I have success');\r\n        },1000);\r\n    }\r\n    else\r\n    {\r\n        reject('I have been rejected');\r\n    }\r\n});\r\n\r\nmyPromiseWithReject.then(value=>console.log(value)).catch(rejectValue=>console.log(rejectValue));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "I have been rejected",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## fetch return promise \r\nfetch(url)\r\n.then()\r\n.then()\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "fetch('https://jsonplaceholder.typicode.com/todos/')\r\n.then(response=>response.json())\r\n.then(users=>{\r\n    const fUser=users[0];\r\n    console.log(fUser)\r\n    return fetch('https://jsonplaceholder.typicode.com/todos/' + fUser.id);\r\n\r\n})\r\n.then(response=>response.json())\r\n.then(post=>console.log(post));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ userId: 1, id: 1, title: 'delectus aut autem', completed: false }",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Async Await"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const myAsyncFunction= async()=> {\r\n\r\n    try\r\n    {\r\n        \r\n        const response= await fetch('https://jsonplaceholder.typicode.com/todos/');\r\n        const jsonUsers=await response.json();\r\n        const firstUser= jsonUsers[0]\r\n        console.log(firstUser)\r\n        const uresponse= await fetch('https://jsonplaceholder.typicode.com/todos/' + firstUser.id);\r\n        const posts= await uresponse.json();\r\n        console.log(posts);\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nmyAsyncFunction()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ userId: 1, id: 1, title: 'delectus aut autem', completed: false }",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const myAsyncFunctionError= async()=> {\r\n\r\n    try\r\n    {\r\n        \r\n    const response= await fetch('https://jsonplaceholder.typicode.com/todos/');\r\n    const jsonUsers= response.json();\r\n    const firstUser= jsonUsers[0]\r\n    console.log(firstUser)\r\n    const uresponse= await fetch('https://jsonplaceholder.typicode.com/todos/' + firstUser.id);\r\n    const posts= await uresponse.json();\r\n    console.log(posts);\r\n    }\r\n    catch(err)\r\n    {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nmyAsyncFunction()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ userId: 1, id: 1, title: 'delectus aut autem', completed: false }",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}