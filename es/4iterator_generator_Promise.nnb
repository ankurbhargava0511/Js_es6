{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "//Iterators\r\n\r\n//function\r\nlet ids=[9000,9001,9002];\r\nconsole.log(typeof ids[Symbol.iterator] );"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "function",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "\r\n//{done: false, value: 9000}\r\nlet ids=[9000,9001,9002];\r\nlet it=ids[Symbol.iterator]();\r\nconsole.log(it.next());"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ value: 9000, done: false }",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "\r\n\r\n\r\n//{done: false, value: 9002}\r\nlet ids=[9000,9001,9002];\r\nlet iter=ids[Symbol.iterator]();\r\niter.next();\r\niter.next();\r\nconsole.log(iter.next());\r\n\r\n//{done: true, value: undefined} // after 3 iterator done =true and next value=undefined\r\nlet ids=[9000,9001,9002];\r\nlet iter=ids[Symbol.iterator]();\r\niter.next();\r\niter.next();\r\niter.next();\r\nconsole.log(iter.next());\r\n\r\n//8000\r\n//8001\r\n//iterator.next.value\r\nlet idMaker={[Symbol.iterator](){\r\n\tlet nextId=8000;\r\n\treturn{\r\n\t\tnext(){\r\n\t\t\treturn{\r\n\t\t\t\tvalue:nextId++,\r\n\t\t\t\tdone:false};\r\n}};\r\n}};\r\nlet it=idMaker[Symbol.iterator]();\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\n\r\n//8000\r\n//8001\r\n//8002\r\nlet idMaker={[Symbol.iterator](){\r\n\tlet nextId=8000;\r\n\treturn{\r\n\t\tnext(){\r\n\t\t\treturn{\r\n\t\t\t\tvalue:nextId++,\r\n\t\t\t\tdone:false};\r\n}};\r\n}};\r\nfor(let vofidMaker){\r\n\tif(v>8002)\r\n\tbreak;\r\nconsole.log(v);\r\n}\r\n\r\n8000\r\n8001\r\n8002\r\nlet idMaker={[Symbol.iterator](){let nextId=8000;\r\nreturn{next(){let value=nextId>8002?undefined:nextId++;\r\nlet done=!value;\r\nreturn{value,done};\r\n}};\r\n}};\r\n\r\nfor(let vofidMaker)console.log(v);\r\n\r\n\r\n\r\n8002\r\nlet ids=[8000,8001,8002];\r\n\r\nfunctionprocess(id1,id2,id3){console.log(id3);\r\n}\r\nprocess(...ids);\r\n\r\nGenerators\r\n\r\n\r\n{done: false, value: 8000}\r\nfunction *process(){yield8000;\r\nyield8001;\r\n}let it=process();\r\nconsole.log(it.next());\r\n\r\n\r\n\r\n{done: false, value: 8001}\r\nfunction *process(){yield8000;\r\nyield8001;\r\n}let it=process();\r\nit.next();\r\nconsole.log(it.next());\r\n\r\n\r\n\r\n{done: true, value: undefined}\r\nfunction *process(){yield8000;\r\nyield8001;\r\n}let it=process();\r\nit.next();\r\n\r\nit.next();\r\nconsole.log(it.next());\r\n\r\n\r\n\r\n7001\r\nfunction *process(){let nextId=7000;\r\nwhile(true)yield(nextId++);\r\n}let it=process();\r\nit.next();\r\nconsole.log(it.next().value);\r\n\r\n\r\n\r\n7000\r\n7001\r\n7002\r\nfunction*process(){let nextId=7000;\r\nwhile(true)yield(nextId++);\r\n}for(let idofprocess()){if(id>7002)break;\r\nconsole.log(id);\r\n}\r\nYielding in Generators\r\n\r\n\r\n{done: false, value: 8000}\r\nfunction*process(){yield8000;\r\n}let it=process();\r\nconsole.log(it.next());\r\n\r\n\r\n\r\n{done: false, value: undefined}\r\nfunction*process(){yield;\r\n}let it=process();\r\nconsole.log(it.next());\r\n\r\n\r\n\r\nresult is 200\r\nfunction*process(){let result=yield;\r\nconsole.log(`resultis${result}`);\r\n}let it=process();\r\nit.next();\r\nit.next(200);\r\n\r\n\r\n\r\nresult is 200\r\n{done: true, value: undefined}\r\nfunction*process(){let result=yield;\r\nconsole.log(`resultis${result}`);\r\n}let it=process();\r\nit.next();\r\nconsole.log(it.next(200));\r\n\r\n\r\n\r\n42\r\nfunction*process(){let newArray=[yield,yield,yield];\r\nconsole.log(newArray[2]);\r\n}let it=process();\r\nit.next();\r\nit.next(2);\r\nit.next(4);\r\nit.next(42);\r\n\r\n\r\n\r\nSyntax Error\r\nfunction*process(){let value=4*yield42;\r\nconsole.log(value);\r\n}let it=process();\r\nit.next();\r\nit.next(10);\r\n\r\n\r\n\r\n40\r\nfunction*process(){let value=4*(yield42);\r\nconsole.log(value);\r\n}let it=process();\r\nit.next();\r\nit.next(10);\r\n\r\n\r\n\r\n42\r\n[1,2,3]\r\nundefined\r\nfunction*process(){yield42;\r\nyield[1,2,3];\r\n}let it=process();\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\n\r\n\r\n\r\n42\r\n1\r\n2\r\n3\r\nundefined\r\nfunction*process(){yield42;\r\nyield*[1,2,3];\r\n}let it=process();\r\n\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\nconsole.log(it.next().value);\r\n\r\nthrow and return\r\n\r\n\r\n9000\r\n{done:true, value:undefined}\r\n{done:true, value:undefined}\r\nfunction*process(){try{yield9000;\r\nyield9001;\r\nyield9002;\r\n}catch(e){}}let it=process();\r\nconsole.log(it.next().value);\r\nconsole.log(it.throw('foo'));\r\nconsole.log(it.next());\r\n\r\n\r\n\r\n9000\r\nException: foo\r\n(execution terminates)\r\nfunction*process(){yield9000;\r\nyield9001;\r\nyield9002;\r\n}let it=process();\r\nconsole.log(it.next().value);\r\nconsole.log(it.throw('foo'));\r\nconsole.log(it.next());\r\n\r\n\r\n\r\n9000\r\n{value: \"foo\", done: true}\r\n{value: undefined, done: true}\r\nfunction*process(){yield9000;\r\nyield9001;\r\nyield9002;\r\n}let it=process();\r\nconsole.log(it.next().value);\r\n//Firefoxonly(currently)console.log(it.return('foo'));\r\nconsole.log(it.next());\r\n\r\nPromises\r\n\r\n\r\nin promise code\r\n(2 second delay)\r\nresolving...\r\nfunctiondoAsync(){let p=newPromise(function(resolve,reject){console.log('inpromisecode');\r\nsetTimeout(function(){console.log('resolving...');\r\nresolve();\r\n},2000);\r\n});\r\nreturnp;\r\n}let promise=doAsync();\r\n\r\n\r\n\r\nin promise code\r\n(2 second delay)\r\nrejecting...\r\nfunctiondoAsync(){let p=newPromise(function(resolve,reject){console.log('inpromisecode');\r\nsetTimeout(function(){console.log('rejecting...');\r\nreject();\r\n},2000);\r\n});\r\nreturnp;\r\n}let promise=doAsync();\r\n\r\n\r\n\r\nin promise code\r\n(wait for resolution)\r\nRejected!\r\nfunctiondoAsync(){// returns a Promise, will be rejected}doAsync().then(function(){console.log('Fulfilled!');\r\n},function(){console.log('Rejected!');\r\n});\r\n\r\n\r\n\r\nin promise code\r\n(wait for resolution)\r\nFulfilled!\r\nfunctiondoAsync(){// returns a Promise, will be resolved}doAsync().then(function(){console.log('Fulfilled!');\r\n},function(){console.log('Rejected!');\r\n}\r\n);\r\n\r\n\r\n\r\nin promise code\r\n(wait for resolution)\r\nRejected! Database Error\r\nfunctiondoAsync(){// returns a Promise, will be rejected using:\r\n// reject('Database Error');\r\n}doAsync().then(function(value){console.log('Fulfilled! ' + value);\r\n},function(reason){console.log('Rejected! ' + reason);\r\n});\r\n\r\n\r\n\r\nin promise code\r\n(wait for resolution)\r\nFulfilled! OK\r\nfunctiondoAsync(){// returns a Promise, will be resolved using:\r\n// resolve('OK');\r\n}doAsync().then(function(value){console.log('Fulfilled! ' + value);\r\n},function(reason){console.log('Rejected! ' + reason);\r\n});\r\n\r\n\r\n\r\nin promise code\r\n(wait for resolution)\r\nFulfilled! OK\r\nReally! For Sure\r\nfunctiondoAsync(){// returns a Promise, will be resolved using:\r\n// resolve('OK');\r\n}doAsync().then(function(value){console.log('Fulfilled!'+value);\r\n\r\nreturn 'For Sure';\r\n}).then(function(value){console.log('Really!'+value);\r\n});\r\n\r\n\r\n\r\n(wait for resolution)\r\nError: No Go\r\nfunctiondoAsync(){// returns a Promise, will be rejected using:\r\n// reject('No Go');\r\n}doAsync().catch(function(reason){console.log('Error:'+reason);\r\n});\r\n\r\nMore Promise Features\r\n\r\n\r\nin promise code\r\nNope\r\nfunctiondoAsync(){let p=newPromise(function(resolve,reject){console.log('inpromisecode');\r\nsetTimeout(function(){resolve( getAnotherPromise() );\r\n},2000);\r\n});\r\nreturnp;\r\n}doAsync().then(function(){console.log('Ok')},function(){console.log('Nope')});\r\n\r\n\r\n\r\nOk: Some String\r\nfunctiondoAsync(){returnPromise.resolve('SomeString');\r\n}doAsync().then(\r\nfunction(value){console.log('Ok:'+value)},function(reason){console.log('Nope:'+reason)}\r\n);\r\n\r\n\r\n\r\nNope: Some Error\r\nfunctiondoAsync(){returnPromise.reject('SomeError');\r\n}doAsync().then(\r\nfunction(value){console.log('Ok:'+value)},function(reason){console.log('Nope:'+reason)}\r\n);\r\n\r\n\r\n\r\n(5 second delay)\r\nOk\r\nlet p1=newPromise(...);\r\nlet p2=newPromise(...);\r\nPromise.all([p1,p2]).then(function(value){console.log('Ok')},function(reason){console.log('Nope')});\r\n\r\n// assume p1 resolves after 3 seconds,\r\n// assume p2 resolves after 5 seconds\r\n\r\n\r\n(2 second delay)\r\nNope\r\nlet p1=newPromise(...);\r\nlet p2=newPromise(...);\r\nPromise.all([p1,p2]).then(function(value){console.log('Ok')},function(reason){console.log('Nope')});\r\n\r\n// assume p1 resolves after 1 second,\r\n// assume p2 is rejected after 2 seconds\r\n\r\n\r\n(3 second delay)\r\nNope\r\nlet p1=newPromise(...);\r\nlet p2=newPromise(...);\r\nPromise.all([p1,p2]).then(function(value){console.log('Ok')},function(reason){console.log('Nope')});\r\n\r\n// assume p1 is rejected after 3 second,\r\n// assume p2 is rejected after 5 seconds\r\n\r\n\r\n(3 second delay)\r\nOk\r\nlet p1=newPromise(...);\r\nlet p2=newPromise(...);\r\nPromise.race([p1,p2]).then(function(value){console.log('Ok')},function(reason){console.log('Nope')});\r\n\r\n// assume p1 resolves after 3 second,\r\n// assume p2 resolves after 5 seconds\r\n\r\n\r\n(3 second delay)\r\nNope\r\nlet p1=newPromise(...);\r\nlet p2=newPromise(...);\r\nPromise.race([p1,p2]).then(function(value){console.log('Ok')},function(reason){console.log('Nope')});\r\n\r\n// assume p1 is rejected after 3 second,\r\n// assume p2 resolves after 5 seconds\r\n\r\n\r\n(4 second delay)\r\nOk\r\nlet p1=newPromise(...);\r\nlet p2=newPromise(...);\r\nPromise.race([p1,p2]).then(function(value){console.log('Ok')},function(reason){console.log('Nope')});\r\n\r\n// assume p1 resolves after 4 second,\r\n// assume p2 is rejected after 5 seconds\r\nIterators\r\nSummary\r\nGenerators\r\nSummary\r\nYielding\r\nSummary\r\nthrow and return\r\nSummary\r\nPromises\r\nSummary\r\nPromise.all\r\n() and Promise.race()\r\nSummary"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function* gen(){\r\n    console.log('a');\r\n    console.log('a');\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const g= gen()\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "g"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "Object [Generator] {}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "g.next()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "a",
                                "a",
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  value: \u001b[90mundefined\u001b[39m,",
                                "  done: \u001b[33mtrue\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function* gen1(i){\r\n    yield i;\r\n    yield i+10;\r\n    return 25;\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const h1= gen1(5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "h1.next()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  value: \u001b[33m5\u001b[39m,",
                                "  done: \u001b[33mfalse\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "h1.next()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  value: \u001b[33m15\u001b[39m,",
                                "  done: \u001b[33mfalse\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "h1.next()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  value: \u001b[33m25\u001b[39m,",
                                "  done: \u001b[33mtrue\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}