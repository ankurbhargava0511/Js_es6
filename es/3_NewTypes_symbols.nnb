{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "//New Types and Object Extensions\r\n// symbols are unique, immutable primative type\r\n\r\n//symbol\r\n\r\nlet eventSymbol=Symbol('resizeevent');\r\nconsole.log(typeof eventSymbol);\r\n\r\n//Symbol(resize event)\r\nlet eventSymbol=Symbol('resizeevent');\r\nconsole.log(eventSymbol.toString());\r\n\r\n//Symbol(calculate event)\r\nconst CALCULATE_EVENT_SYMBOL=Symbol('calculateevent');\r\nconsole.log(CALCULATE_EVENT_SYMBOL.toString());\r\n\r\n//Symbol(event)\r\nlet s=Symbol.for('event');\r\nconsole.log(s.toString());\r\n\r\n//false //Symbol are always unique\r\nlet s=Symbol('event');\r\nlet s2=Symbol('event');\r\nconsole.log(s===s2);\r\n\r\n//true\r\nlet s=Symbol.for('event');\r\nlet s2=Symbol.for('event');\r\nconsole.log(s===s2);\r\n\r\n//false\r\nlet s=Symbol.for('event');\r\nlet s2=Symbol.for('event2');\r\nconsole.log(s===s2);\r\n\r\n//event ----get key\r\nlet s=Symbol.for('event');\r\nlet description=Symbol.keyFor(s);\r\nconsole.log(description);\r\n\r\n//My Article\r\n// Many time symbol is used as properties\r\nlet article={\r\n\ttitle:'Whiteface Mountain',\r\n\t[Symbol.for('article')]:'MyArticle'\r\n};\r\nlet value=article[Symbol.for('article')];\r\nconsole.log(value);\r\n\r\n//['title']\r\n// symbol cannot be access as properties\r\nlet article={\r\n\ttitle:'Whiteface Mountain',\r\n\t[Symbol.for('article')]:'MyArticle'\r\n\t};\r\nconsole.log(Object.getOwnPropertyNames(article));\r\n\r\n//[Symbol(article)]\r\nlet article={\r\n\ttitle:'WhitefaceMountain',\r\n\t[Symbol.for('article')]:'MyArticle'};\r\nconsole.log(Object.getOwnPropertySymbols(article));\r\n\r\n//Well-known Symbols\r\n//[object Object]\r\nlet Blog=function(){};\r\nlet blog=newBlog();\r\nconsole.log(blog.toString());\r\n\r\n//[object Blog Class]\r\n// toStringtag is well known symbol. it make tostring more raadable\r\nlet Blog=function(){};\r\nBlog.prototype[Symbol.toStringTag]='BlogClass';\r\nlet blog=newBlog();\r\nconsole.log(blog.toString());\r\n\r\n//[8, 12, 16]\r\nlet values=[8,12,16];\r\nconsole.log([].concat(values));\r\n\r\n//[ [8, 12, 16] ]\r\n// this symbol stop array to spread\r\nlet values=[8,12,16];\r\nvalues[Symbol.isConcatSpreadable]=false;\r\nconsole.log([].concat(values));\r\n\r\n//8,12,16100\r\nlet values=[8,12,16];\r\nlet sum=values+100;\r\nconsole.log(sum);\r\n\r\n//default\r\n//142\r\nlet values=[8,12,16];\r\nvalues[Symbol.toPrimitive]=function(hint){\r\n\tconsole.log(hint);\r\nreturn42;\r\n};\r\nlet sum=values+100;\r\nconsole.log(sum);\r\n\r\n//Object Extensions\r\n//2\r\nlet a={x:1};\r\nlet b={y:2};\r\nObject.setPrototypeOf(a,b);\r\nconsole.log(a.y);\r\n\r\n\r\n//{a: 1, b: 2}\r\n// it will populate target will all the values assign  a and b here\r\nlet a={a:1},b={b:2};\r\nlet target={};\r\nObject.assign(target,a,b);\r\nconsole.log(target);\r\n\r\n//{a: 5, b: 2}\r\n// b overwrite a\r\nlet a={a:1},b={a: 5, b:2};\r\nlet target={};\r\nObject.assign(target,a,b);\r\nconsole.log(target);\r\n\r\n//{a: 5, b: 2} // because its not enaumerable\r\nlet a={a:1},b={a:5,b:2};\r\nObject.defineProperty(b,'c',{value:10,enumerable:false});\r\nlet target={};\r\nObject.assign(target,a,b);\r\nconsole.log(target);\r\n\r\n//{a: 5, b: 2} // assign only look at object assign not the prototype change\r\nlet a={a:1},b={a:5,b:2},c={c:20};\r\nObject.setPrototypeOf(b,c);\r\nlet target={};\r\nObject.assign(target,a,b);\r\nconsole.log(target);\r\n\r\n//false\r\nlet amount=NaN;\r\nconsole.log(amount===amount);\r\n\r\n//true to manage NaN below is ES6 syntax\r\n// its a better value to compare objects\r\nlet amount=NaN;\r\nconsole.log(Object.is(amount,amount));\r\n\r\n//true\r\nlet amount=0,total=-0;\r\nconsole.log(amount===total);\r\n\r\n//false \r\nlet amount=0,total=-0;\r\nconsole.log(Object.is(amount,total));\r\n\r\n//[Symbol(article)]\r\nlet article={\r\n\ttitle:'WhitefaceMountain',\r\n\t[Symbol.for('article')]:'MyArticle'};\r\nconsole.log(Object.getOwnPropertySymbols(article));\r\n\r\n//String Extensions\r\n\r\n//true\r\nlet title='SantaBarbaraSurfRiders';\r\nconsole.log(title.startsWith('Santa'));\r\n\r\n//false\r\nlet title='SantaBarbaraSurfRiders';\r\nconsole.log(title.endsWith('Rider'));\r\n\r\n//true\r\nlet title='SantaBarbaraSurfRiders';\r\nconsole.log(title.includes('ba'));\r\n\r\n//Surfer's 🏄🏄Blog emosi character\r\nvar title=\"Surfer's\\u{1f3c4}Blog\";\r\nconsole.log(title);\r\n\r\n//2\r\nvar surfer=\"\\u{1f3c4}\";\r\nconsole.log(surfer.length);\r\n\r\n//3\r\n//🌊🌊🏄🏄🐋🐋\r\nvar surfer=\"\\u{1f30a}\\u{1f3c4}\\u{1f40b}\";\r\nconsole.log(Array.from(surfer).length);\r\n\r\nconsole.log(surfer);\r\n\r\n//Mazatlán9 // issue with ES5\r\nvar title=\"Mazatla\\u0301n\";\r\nconsole.log(title+''+title.length);\r\n\r\n//Mazatlán8 // Solution inES6 \r\nvar title=\"Mazatla\\u0301n\";\r\nconsole.log(title+''+title.normalize().length);\r\n\r\n//6e  normalise convert unicode to ascii\r\nvar title=\"Mazatla\\u0301n\";\r\nconsole.log(title.normalize().codePointAt(7).toString(16));\r\n\r\n//🏄🏄\r\nconsole.log(String.fromCodePoint(0x1f3c4));\r\n\r\n//Surfer \\u{1f3c4}\\n\r\n// raw return the raw string\r\nlet title='Surfer';\r\nlet output=String.raw`${title}\\u{1f3c4}\\n`;\r\nconsole.log(output);\r\n\r\n\r\n//🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊\r\n// repeat function repeat the string\r\nlet wave='\\u{1f30a}';\r\nconsole.log(wave.repeat(10));\r\n\r\n//Number Extensions\r\n\r\n//true\r\n//parseInt without Number is a global function and should be avoided\r\nconsole.log(Number.parseInt===parseInt);\r\n\r\n//true\r\nconsole.log(Number.parseFloat===parseFloat);\r\n\r\n//true\r\n//false\r\nlet s='NaN';\r\nconsole.log(isNaN(s));\r\nconsole.log(Number.isNaN(s));\r\n\r\n//true\r\n//false\r\nlet s='8000';\r\nconsole.log(isFinite(s));\r\nconsole.log(Number.isFinite(s));\r\n\r\n//false\r\nlet sum=408.2;\r\nconsole.log(Number.isInteger(sum));\r\n\r\n//false false false\r\n//true\r\nconsole.log(Number.isInteger(NaN));\r\nconsole.log(Number.isInteger(Infinity));\r\nconsole.log(Number.isInteger(undefined));\r\nconsole.log(Number.isInteger(3));\r\n\r\n//true\r\n//false\r\nlet a=Math.pow(2,53)-1;\r\nconsole.log(Number.isSafeInteger(a));\r\na=Math.pow(2,53);\r\nconsole.log(Number.isSafeInteger(a));\r\n\r\n//2.220446049250313e-16\r\n//9007199254740991\r\n//-9007199254740991\r\nconsole.log(Number.EPSILON);\r\nconsole.log(Number.MAX_SAFE_INTEGER);\r\nconsole.log(Number.MIN_SAFE_INTEGER);\r\n\r\n//Math Extensions\r\n/*\r\nHyperbolic Functions\r\ncosh()\r\nacosh()\r\nsinh()\r\nasinh()\r\ntanh()\r\natanh()\r\nhypot()\r\n*/\r\n/*\r\nArithmetic Functions\r\ncbrt() -cube root\r\nclz32() -count leading zeros (32 bit integers)\r\nexpm1() -equal to exp(x) -1\r\nlog2()-log base 2\r\nlog10() -log base 10\r\nlog1p() -equal to log(x + 1)\r\nimul() -32 bit integer multiplication\r\n*/\r\n\r\n/*Miscellaneous Functions\r\nsign() = the number's sign: 1, -1, 0, -0, NaN\r\ntrunc()=the integer part of a number\r\nfround() =round to nearest 32 bit floating-point value\r\n*/\r\n\r\n/*0\r\n-0 (0 in Edge)\r\n-1\r\n1\r\nNaN */\r\nconsole.log(Math.sign(0));\r\nconsole.log(Math.sign(-0));\r\nconsole.log(Math.sign(-20));\r\nconsole.log(Math.sign(20));\r\nconsole.log(Math.sign(NaN));\r\n\r\n//3\r\nconsole.log(Math.cbrt(27));\r\n\r\n//27\r\n//-27\r\nconsole.log(Math.trunc(27.1));\r\nconsole.log(Math.trunc(-27.9));\r\n\r\n//RegExpExtensions\r\n\r\n//false //its look ok but not working. to make in working we need to use special char\r\nlet pattern=/\\u{1f3c4}/;\r\nconsole.log(pattern.test('🏄🏄'));\r\n\r\n//true // special char is /u\r\nlet pattern=/\\u{1f3c4}/u;\r\nconsole.log(pattern.test('🏄🏄'));\r\n\r\n//false\r\nlet pattern=/^.Surfer/;\r\nconsole.log(pattern.test('🏄🏄Surfer'));\r\n\r\n//true // same thing use of /u\r\nlet pattern=/^.Surfer/u;\r\nconsole.log(pattern.test('🏄🏄Surfer'));\r\n// /y  flag will search from back\r\n//0\r\n//false\r\nlet pattern=/900/y;\r\nconsole.log(pattern.lastIndex);\r\nconsole.log(pattern.test('800900'));\r\n\r\n//true here we are settling last index as 3\r\nlet pattern=/900/y;\r\npattern.lastIndex= 3;\r\nconsole.log(pattern.test('800900'));\r\n\r\n// pattern as properties flag to show what flag is set on expression\r\n//gy\r\n//(Order will be \"gimuy\")\r\nlet pattern=/900/yg;\r\nconsole.log(pattern.flags);\r\n\r\n//Function Extensions\r\n// this is a property name on function\r\n//calc\r\nlet fn=function calc(){\r\n\treturn 0;\r\n};\r\nconsole.log(fn.name);\r\n\r\n\r\n//fn below function does not have name do it will take variable name\r\nlet fn=function(){\r\n\treturn 0;\r\n};\r\nconsole.log(fn.name);\r\n\r\n//fn\r\nlet fn=function(){\r\n\treturn 0;\r\n};\r\nlet newFn=fn;\r\nconsole.log(newFn.name);\r\n\r\n\r\n//Calculator\r\n//add\r\nclass Calculator{\r\n\tconstructor(){\r\n\t\t\r\n\t}\r\n\tadd(){\r\n\t\t\r\n\t}}\r\nlet c=new Calculator();\r\nconsole.log(Calculator.name);\r\nconsole.log(c.add.name);\r\n"
            ],
            "outputs": []
        }
    ]
}